{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\hadee\\\\Desktop\\\\sharpnerProjects\\\\MeetUP\\\\pages\\\\index.js\";\nimport MeetupList from '../components/meetups/MeetupList';\nimport { MongoClient } from 'mongodb'; // ... other code ...\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticProps() {\n  try {\n    const password = encodeURIComponent(\"#Maddy@123\");\n    const connectionString = `mongodb+srv://hasan:${password}@livemeetup.vsjlgyd.mongodb.net/?retryWrites=true&w=majority`; // Initialize MongoDB client\n\n    const client = new MongoClient(connectionString, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n    await client.connect();\n    const db = client.db();\n    const meetupsCollection = db.collection('livemeetup');\n    const meetups = await meetupsCollection.find().toArray();\n    client.close();\n    return {\n      props: {\n        meetups: meetups.map(meetup => ({\n          title: meetup.title,\n          address: meetup.address,\n          image: meetup.image,\n          id: meetup._id.toString()\n        }))\n      },\n      revalidate: 10\n    };\n  } catch (error) {\n    console.error('MongoDB Connection Error:', error);\n    return {\n      props: {\n        meetups: [] // Return an empty array or handle the error accordingly\n\n      },\n      revalidate: 10\n    };\n  }\n}\nexport default HomePage; // import MeetupList from '../components/meetups/MeetupList';\n// import {MongoClient} from 'mongodb';\n// // import MeetupList from '../components/meetups/MeetupList';\n// const DUMMY_MEETUPS = [\n//     {\n//       id: '1',\n//       title: 'Tech Meetup',\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\n//       address: '123 Main Street, Cityville',\n//       description: 'Join us for a meetup about the latest in technology.',\n//     },\n//     {\n//       id: '2',\n//       title: 'Fitness Session',\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\n//       address: '456 Fitness Avenue, Health City',\n//       description: 'Get fit and healthy at our fitness meetup.',\n//     },\n//     {\n//       id: '3',\n//       title: 'Art Workshop',\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\n//       address: '789 Art Street, Creativity Town',\n//       description: 'Explore your artistic side at our art workshop.',\n//     },\n//     {\n//       id: '4',\n//       title: 'Book Club',\n//       image: `https://picsum.photos/seed/${Math.random()}/100/200`,\n//       address: '101 Library Lane, Bookland',\n//       description: 'Join fellow book lovers in our monthly book club meetup.',\n//     },\n//     {\n//       id: '5',\n//       title: 'Food Tasting',\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\n//       address: '555 Taste Street, Foodie City',\n//       description: 'Experience a culinary journey at our food tasting meetup.',\n//     },\n//     {\n//       id: '6',\n//       title: 'Music Jam',\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\n//       address: '888 Melody Lane, Music Town',\n//       description: 'Bring your instruments and jam with fellow music enthusiasts.',\n//     },\n//   ];\n// function HomePage(props){\n//     return (\n//     <MeetupList meetups={props.meetups} />\n//     )\n// }\n// export async function getStaticProps() {\n//   try {\n//     const password = encodeURIComponent(\"#Maddy@123\");\n//     const connectionString = `mongodb+srv://hasan:${password}@livemeetup.vsjlgyd.mongodb.net/?retryWrites=true&w=majority`;\n//     // Initialize MongoDB client\n//     const client = new MongoClient(connectionString, {\n//       useNewUrlParser: true,\n//       useUnifiedTopology: true,\n//     });\n//     await client.connect();\n//     const db = client.db();\n//     const meetupsCollection = db.collection('livemeetup');\n//     const meetups = await meetupsCollection.find().toArray();\n//     client.close();\n//     return {\n//       props: {\n//         meetups: meetups.map(meetup => ({\n//           title: meetup.title,\n//           address: meetup.address,\n//           image: meetup.image,\n//           id: meetup._id.toString(),\n//         })),\n//       },\n//       revalidate: 10,\n//     };\n//   } catch (error) {\n//     console.error('MongoDB Connection Error:', error);\n//     return {\n//       props: {\n//         meetups: [], // Return an empty array or handle the error accordingly\n//       },\n//       revalidate: 10,\n//     };\n//   }\n// }\n//  export default HomePage;","map":{"version":3,"sources":["C:/Users/hadee/Desktop/sharpnerProjects/MeetUP/pages/index.js"],"names":["MeetupList","MongoClient","HomePage","props","meetups","getStaticProps","password","encodeURIComponent","connectionString","client","useNewUrlParser","useUnifiedTopology","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate","error","console"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,SAAQC,WAAR,QAA0B,SAA1B,C,CAEA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AACpB,sBAEA,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAFA;AAKH;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACtC,MAAI;AACD,UAAMC,QAAQ,GAAGC,kBAAkB,CAAC,YAAD,CAAnC;AACA,UAAMC,gBAAgB,GAAI,uBAAsBF,QAAS,8DAAzD,CAFC,CAID;;AACA,UAAMG,MAAM,GAAG,IAAIR,WAAJ,CAAgBO,gBAAhB,EAAkC;AAC/CE,MAAAA,eAAe,EAAE,IAD8B;AAE/CC,MAAAA,kBAAkB,EAAE;AAF2B,KAAlC,CAAf;AAKA,UAAMF,MAAM,CAACG,OAAP,EAAN;AAEA,UAAMC,EAAE,GAAGJ,MAAM,CAACI,EAAP,EAAX;AACA,UAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,YAAd,CAA1B;AAEA,UAAMX,OAAO,GAAG,MAAMU,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAR,IAAAA,MAAM,CAACS,KAAP;AAEA,WAAO;AACLf,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAEA,OAAO,CAACe,GAAR,CAAYC,MAAM,KAAK;AAC9BC,UAAAA,KAAK,EAAED,MAAM,CAACC,KADgB;AAE9BC,UAAAA,OAAO,EAAEF,MAAM,CAACE,OAFc;AAG9BC,UAAAA,KAAK,EAAEH,MAAM,CAACG,KAHgB;AAI9BC,UAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJ0B,SAAL,CAAlB;AADJ,OADF;AASLC,MAAAA,UAAU,EAAE;AATP,KAAP;AAWF,GA9BD,CA8BE,OAAOC,KAAP,EAAc;AACbC,IAAAA,OAAO,CAACD,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACA,WAAO;AACLzB,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,EADJ,CACQ;;AADR,OADF;AAILuB,MAAAA,UAAU,EAAE;AAJP,KAAP;AAMF;AACD;AAED,eAAezB,QAAf,C,CAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA","sourcesContent":["import MeetupList from '../components/meetups/MeetupList';\r\nimport {MongoClient} from 'mongodb';\r\n\r\n// ... other code ...\r\n\r\nfunction HomePage(props){\r\n    return (\r\n    \r\n    <MeetupList meetups={props.meetups} />\r\n\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n try {\r\n    const password = encodeURIComponent(\"#Maddy@123\");\r\n    const connectionString = `mongodb+srv://hasan:${password}@livemeetup.vsjlgyd.mongodb.net/?retryWrites=true&w=majority`;\r\n\r\n    // Initialize MongoDB client\r\n    const client = new MongoClient(connectionString, {\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,\r\n    });\r\n\r\n    await client.connect();\r\n\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('livemeetup');\r\n\r\n    const meetups = await meetupsCollection.find().toArray();\r\n\r\n    client.close();\r\n\r\n    return {\r\n      props: {\r\n        meetups: meetups.map(meetup => ({\r\n          title: meetup.title,\r\n          address: meetup.address,\r\n          image: meetup.image,\r\n          id: meetup._id.toString(),\r\n        })),\r\n      },\r\n      revalidate: 10,\r\n    };\r\n } catch (error) {\r\n    console.error('MongoDB Connection Error:', error);\r\n    return {\r\n      props: {\r\n        meetups: [], // Return an empty array or handle the error accordingly\r\n      },\r\n      revalidate: 10,\r\n    };\r\n }\r\n}\r\n\r\nexport default HomePage;\r\n\r\n\r\n\r\n// import MeetupList from '../components/meetups/MeetupList';\r\n// import {MongoClient} from 'mongodb';\r\n\r\n// // import MeetupList from '../components/meetups/MeetupList';\r\n\r\n// const DUMMY_MEETUPS = [\r\n//     {\r\n//       id: '1',\r\n//       title: 'Tech Meetup',\r\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\r\n//       address: '123 Main Street, Cityville',\r\n//       description: 'Join us for a meetup about the latest in technology.',\r\n//     },\r\n//     {\r\n//       id: '2',\r\n//       title: 'Fitness Session',\r\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\r\n//       address: '456 Fitness Avenue, Health City',\r\n//       description: 'Get fit and healthy at our fitness meetup.',\r\n//     },\r\n//     {\r\n//       id: '3',\r\n//       title: 'Art Workshop',\r\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\r\n//       address: '789 Art Street, Creativity Town',\r\n//       description: 'Explore your artistic side at our art workshop.',\r\n//     },\r\n//     {\r\n//       id: '4',\r\n//       title: 'Book Club',\r\n//       image: `https://picsum.photos/seed/${Math.random()}/100/200`,\r\n//       address: '101 Library Lane, Bookland',\r\n//       description: 'Join fellow book lovers in our monthly book club meetup.',\r\n//     },\r\n//     {\r\n//       id: '5',\r\n//       title: 'Food Tasting',\r\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\r\n//       address: '555 Taste Street, Foodie City',\r\n//       description: 'Experience a culinary journey at our food tasting meetup.',\r\n//     },\r\n//     {\r\n//       id: '6',\r\n//       title: 'Music Jam',\r\n//       image: `https://picsum.photos/seed/${Math.random()}/200/300`,\r\n//       address: '888 Melody Lane, Music Town',\r\n//       description: 'Bring your instruments and jam with fellow music enthusiasts.',\r\n//     },\r\n//   ];\r\n  \r\n\r\n// function HomePage(props){\r\n//     return (\r\n    \r\n//     <MeetupList meetups={props.meetups} />\r\n\r\n//     )\r\n// }\r\n\r\n\r\n// export async function getStaticProps() {\r\n//   try {\r\n//     const password = encodeURIComponent(\"#Maddy@123\");\r\n//     const connectionString = `mongodb+srv://hasan:${password}@livemeetup.vsjlgyd.mongodb.net/?retryWrites=true&w=majority`;\r\n\r\n//     // Initialize MongoDB client\r\n//     const client = new MongoClient(connectionString, {\r\n//       useNewUrlParser: true,\r\n//       useUnifiedTopology: true,\r\n//     });\r\n\r\n//     await client.connect();\r\n\r\n//     const db = client.db();\r\n//     const meetupsCollection = db.collection('livemeetup');\r\n\r\n//     const meetups = await meetupsCollection.find().toArray();\r\n\r\n//     client.close();\r\n\r\n//     return {\r\n//       props: {\r\n//         meetups: meetups.map(meetup => ({\r\n//           title: meetup.title,\r\n//           address: meetup.address,\r\n//           image: meetup.image,\r\n//           id: meetup._id.toString(),\r\n//         })),\r\n//       },\r\n//       revalidate: 10,\r\n//     };\r\n//   } catch (error) {\r\n//     console.error('MongoDB Connection Error:', error);\r\n//     return {\r\n//       props: {\r\n//         meetups: [], // Return an empty array or handle the error accordingly\r\n//       },\r\n//       revalidate: 10,\r\n//     };\r\n//   }\r\n// }\r\n\r\n\r\n//  export default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}